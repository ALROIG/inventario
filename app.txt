if(process.env.NODE_ENV != 'production'){
    require('dotenv').config()
}


-------------
at login
<% if (messages.error) { %>
    <%= messages.error %>
        <% } %>

const express = require('express');
const path = require("path")
const bcrypt = require('bcrypt')
const passport = require('passport')
const flash = require('express-flash')
const session = require('express-session')
const app = express();

const initializePassport = require('./passport-config')
initializePassport(
    passport, 
    email =>  users.find(user => user.email === email)
)

const users = []

app.set('view-engine', 'ejs')
// app.use(express.urlencoded({ extended: false}))
// app.use(flash())
// app.use(session({
//     secret: process.env.SESSION_SECRET,
//     resave: false,
//     saveUninitialized: false
// }))
// app.use(passport.initialize())
// app.use(passport.session())

app.get("/",(req, res)=>{
    // res.send("Rodrigo")
    // res.sendFile(path.join(__dirname + "/public/index_test.html")); // Con Html
    res.render('index_test.ejs')
})

app.get("/login",(req, res)=>{
    res.render('login.ejs')
})

app.post("/login", passport.authenticate('local', {
    // Here i need some help with auth, i dont need to make this complex with passport
    successRedirect: '/',
    failureRedirect: '/login',
    failureFlash: true
}));

app.get("/register",(req, res)=>{
    res.render('register.ejs')
})

app.post("/register",async (req, res)=>{
    try {
        const hashedPassword = await bcrypt.hash(req.body.password.toString(), 10);
        users.push({
            // id: Date.now().toString(),  // Actually here is auto incremental
            nombre_emp: req.body.name,
            apellido_emp: req.body.lname,
            rol_emp: req.body.role,
            correo_emp: req.body.email,
            contrasena_emp: hashedPassword,
        })
        res.redirect('/login')
    } catch {
        res.redirect('/register')
    }
    console.log(users);
})

app.listen(3000, ()=>{
    console.log("Server listening running on port 3000");
})